<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials-rsses on Waziup github platform test</title>
    <link>http://fizarbd.github.io/web/tutorials/index.xml</link>
    <description>Recent content in Tutorials-rsses on Waziup github platform test</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 21 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://fizarbd.github.io/web/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hosting on GitHub Pages</title>
      <link>http://fizarbd.github.io/web/tutorials/github_pages_blog/</link>
      <pubDate>Fri, 21 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/tutorials/github_pages_blog/</guid>
      <description>

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Many Hugo users have expressed interest in seeing a tutorial for how to set up a blog that generated by Hugo and hosted on GitHub Pages. This tutorial will do just that. We only require that the reader has Hugo installed correctly and is comfortable with git and GitHub.&lt;/p&gt;

&lt;p&gt;During this tutorial, I will walk you through the main steps I took to create an example blog available at &lt;a href=&#34;http://spencerlyon2.github.io/hugo_gh_blog&#34;&gt;http://spencerlyon2.github.io/hugo_gh_blog&lt;/a&gt;. The source code for this blog is on &lt;a href=&#34;https://github.com/spencerlyon2/hugo_gh_blog&#34;&gt;GitHub&lt;/a&gt;. Readers are encouraged to download the example repository and follow along.&lt;/p&gt;

&lt;h3 id=&#34;find-a-home-for-your-files&#34;&gt;Find a Home for Your Files&lt;/h3&gt;

&lt;p&gt;As our goal is to host a website using GitHub Pages, it is natural for us to host the content of the page in a GitHub repository. Thus, the first step is to either create a new repository on GitHub or create a new directory within an existing repository where the content of the website will live. To do this I created the repository &lt;a href=&#34;https://github.com/spencerlyon2/hugo_gh_blog&#34;&gt;spencerlyon2/hugo_gh_blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-the-blog&#34;&gt;Create the Blog&lt;/h2&gt;

&lt;h3 id=&#34;write-a-config-yaml-file&#34;&gt;Write a &lt;code&gt;config.yaml&lt;/code&gt; File&lt;/h3&gt;

&lt;p&gt;The very first step in creating a new Hugo site is to &lt;a href=&#34;http://fizarbd.github.io/web/overview/configuration&#34;&gt;write the config file&lt;/a&gt;. This config file is important for at least two reasons: (1) this is where site-wide settings (like the websites &lt;code&gt;baseurl&lt;/code&gt;) go and (2) the config file dictates to some extent how Hugo will generate the website. For the example website I created a file &lt;code&gt;config.yaml&lt;/code&gt; with the following contents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
contentdir: &amp;quot;content&amp;quot;
layoutdir: &amp;quot;layouts&amp;quot;
publishdir: &amp;quot;public&amp;quot;
indexes:
  category: &amp;quot;categories&amp;quot;
baseurl: &amp;quot;http://spencerlyon2.github.io/hugo_gh_blog&amp;quot;
title: &amp;quot;Hugo Blog Template for GitHub Pages&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;define-structure-of-website&#34;&gt;Define Structure of Website&lt;/h3&gt;

&lt;p&gt;Hugo assumes that you organize the content of your site in a meaningful way and uses the same structure to render the website. Notice that we have the line &lt;code&gt;contentdir: &amp;quot;content&amp;quot;&lt;/code&gt; in our configuration file. This means that all the actual content of the website should be placed somewhere within a folder named &lt;code&gt;content&lt;/code&gt;. Hugo treats all directories in &lt;code&gt;content&lt;/code&gt; as sections. For our example we only need one section: a place to hold our blog posts. So we created two new folders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ content/
        ▾ posts/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-html-templates&#34;&gt;Create html Templates&lt;/h3&gt;

&lt;p&gt;The next step is to define the look and feel of your new website. Because Hugo will generate the site using html templates written by the user (you), this step is very subjective. I will merely present one possible theme that could be used to generate a blog. I decided to base the example project on a Jekyll theme called &lt;a href=&#34;http://lanyon.getpoole.com&#34;&gt;lanyon&lt;/a&gt;. The lanyon theme is pure css and a slightly modified version of the css is in the &lt;code&gt;/static/css&lt;/code&gt; directory of the example repository. If you are following along, you should grab the &lt;code&gt;static&lt;/code&gt; folder from the example repository and put it alongside the &lt;code&gt;content&lt;/code&gt; folder you just created.&lt;/p&gt;

&lt;p&gt;Because there are so many files needed to fully compose a complete website, I will not be able to go trough each of them here. I will, however, show what the directory structure should look like when all is said and done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ content/
        ▾ posts/
            &amp;lt;blog posts&amp;gt;.md
    ▾ static/
        ▾ css/
            lanyon.css
            poole.css
    ▾ layouts/
        ▾ partials/
            &amp;lt;templates to be used in other files&amp;gt;.html
        ▾ posts/
            li.html
            single.html
            summary.html
        ▾ indexes/
            category.html
            indexes.html
            posts.html
        index.html
    README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the files in the example repository is well commented with a description of what the file as a whole does as well as an explanation of all major components in the file. If you are new to web development and/or Hugo I encourage you to search through these files to get a feel for how Hugo templates work and how the site is stitched together.&lt;/p&gt;

&lt;h3 id=&#34;add-some-content&#34;&gt;Add Some Content&lt;/h3&gt;

&lt;p&gt;The final step in creating the blog is to add some actual blog posts. To do this simply create one markdown file (with extension .md) for each new blog post. At the top of each file you should include a metadata section that tells Hugo some things about the post (see &lt;a href=&#34;http://fizarbd.github.io/web/content/front-matter&#34;&gt;docs&lt;/a&gt;). For example, consider the yaml metadata section from the top of the file &lt;code&gt;/content/posts/newest.md&lt;/code&gt; from the example repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Just another sample post&amp;quot;
date: &amp;quot;2014-03-29&amp;quot;
description: &amp;quot;This should be a more useful description&amp;quot;
categories: 
    - &amp;quot;hugo&amp;quot;
    - &amp;quot;fun&amp;quot;
    - &amp;quot;test&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The keys set in this section are the mandatory &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; as well as the optional &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;categories&lt;/code&gt;. Each of these items is used throughout the templates found in the &lt;code&gt;/layouts&lt;/code&gt; directory and gives Hugo information about the post from other pages in the website.&lt;/p&gt;

&lt;h2 id=&#34;configure-git-workflow&#34;&gt;Configure &lt;code&gt;git&lt;/code&gt; Workflow&lt;/h2&gt;

&lt;p&gt;Once the site is set up and working properly, we need to push it to the correct branch of a GitHub repository so the website can be served through GitHub Pages. There are many ways to do this. Here I will show the workflow I currently use to manage my websites that are hosted through GitHub Pages.&lt;/p&gt;

&lt;p&gt;GitHub Pages will serve up a website for any repository that has a branch called &lt;code&gt;gh-pages&lt;/code&gt; with a valid &lt;code&gt;index.html&lt;/code&gt; file at that branch&amp;rsquo;s root. A typical workflow might be to keep the content of a website on the &lt;code&gt;master&lt;/code&gt; branch of a repository and the generated website on the &lt;code&gt;gh-pages&lt;/code&gt; branch. This provides nice separation between input and output, but can be very tedious to work with. As a workaround we will use the &lt;code&gt;git subtree&lt;/code&gt; family of commands to have the &lt;code&gt;public&lt;/code&gt; directory (or whatever &lt;code&gt;publishdir&lt;/code&gt; is set to in your &lt;code&gt;config.yaml&lt;/code&gt;) mirror the root of the &lt;code&gt;gh-pages&lt;/code&gt; branch of the repository. This will allow us to do all our work on the &lt;code&gt;master&lt;/code&gt; branch, run Hugo have have the site output into the &lt;code&gt;public&lt;/code&gt; directory, and then push that directory directly to the correct place for GitHub Pages to serve our site.&lt;/p&gt;

&lt;p&gt;To get this properly set up we will execute a series of commands at the terminal. I will include all of them in one place here for easy copy and paste, and will explain what each line does via comments. Note that this is to be run from the &lt;code&gt;&amp;lt;root&amp;gt;&lt;/code&gt; directory (wherever the &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; folders of your Hugo project live). Also note that you will need to change the commands that have the example repository GitHub address so that they point to your repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create a new orphand branch (no commit history) named gh-pages
git checkout --orphan gh-pages

# Unstage all files
git rm --cached $(git ls-files)

# Grab one file from the master branch so we can make a commit
git checkout master README.md

# Add and commit that file
git add .
git commit -m &amp;quot;INIT: initial commit on gh-pages branch&amp;quot;

# Push to remote gh-pages branch 
git push origin gh-pages

# Return to master branch
git checkout master

# Remove the public folder to make room for the gh-pages subtree
rm -rf public

# Add the gh-pages branch of the repository. It will look like a folder named public
git subtree add --prefix public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages --squash

# Pull down the file we just committed. This helps avoid merge conflicts
git subtree pull --prefix=public

# Run hugo. Generated site will be placed in public directory (or omit -t ThemeName if you&#39;re not using a theme)
hugo -t ThemeName


# Add everything
git add -A

# Commit and push to master
git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; git push origin master

# Push the public subtree to the gh-pages branch
git subtree push --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After executing these commands and waiting for the GitHub servers to update, the website we just created was live at &lt;a href=&#34;http://spencerlyon2.github.io/hugo_gh_blog&#34;&gt;http://spencerlyon2.github.io/hugo_gh_blog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;deploy-sh&#34;&gt;&lt;code&gt;deploy.sh&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now, as you add new posts to your blog, you will follow steps that look something like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the markdown source for the new post within the &lt;code&gt;content/posts&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Preview your work by running Hugo in server mode with &lt;code&gt;hugo server --watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Hugo not in server mode so that the generated urls will be correct for the website&lt;/li&gt;
&lt;li&gt;Add and commit the new post in &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Push the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Push the public subtree to the remote &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two items in the previous list are simply a way to conveniently preview your content as you write. This is a dynamic and fairly streamlined process. All the remaining items, however, are the same every time you want to add new content to the website. To make this repetitive process easier, I have adapted a script from the source repository for the &lt;a href=&#34;https://github.com/chimera/chimeraarts.org&#34;&gt;Chimer Arta &amp;amp; Maker Space&lt;/a&gt; website that is highlighted in the &lt;a href=&#34;http://fizarbd.github.io/web/showcase&#34;&gt;Hugo Showcase&lt;/a&gt;. The script lives in a file called &lt;code&gt;deploy.sh&lt;/code&gt; and has the following contents:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first command &lt;code&gt;hugo&lt;/code&gt; assumes you are running with all the default settings.&lt;/p&gt;

&lt;p&gt;To use a theme, make sure to specify it with &lt;code&gt;-t ThemeName&lt;/code&gt; instead (or include the theme in the config file).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t ThemeName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To build all draft posts &lt;em&gt;(If you only have drafts, no site will be generated)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Deploy.sh:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master
git subtree push --prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can replace the last four items from our workflow list with a single command &lt;code&gt;bash deploy.sh&lt;/code&gt;. This script accepts as an optional argument the commit message that git should use when committing your changes. If you wish to include a custom commit message, do so by putting it quotes after calling bash on the script: &lt;code&gt;bash deploy.sh &amp;quot;&amp;lt;my commit msg&amp;gt;&amp;quot;&lt;/code&gt;. If you choose not to specify the commit message, one will be generated for you using the current time.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this tutorial helped you get your website off its feet and out into the open! If you have any further questions feel free to contact the community through the &lt;a href=&#34;http://fizarbd.github.io/web/community/mailing-list&#34;&gt;mailing lists&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MathJax Support</title>
      <link>http://fizarbd.github.io/web/tutorials/mathjax/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/tutorials/mathjax/</guid>
      <description>

&lt;h2 id=&#34;what-is-mathjax&#34;&gt;What is MathJax?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; is a JavaScript library that allows allows the display of mathematical expressions described via a LaTeX-style syntax in the HTML (or Markdown) source of a web page. As it is a pure a JavaScript library, getting it to work within Hugo is fairly straightforward, but does have some oddities that will be discussed here.&lt;/p&gt;

&lt;p&gt;This is not an introduction into actually using MathJax to render typeset mathematics on your website. Instead, this page is a collection of tips and hints for one way to get MathJax working on a website built with Hugo.&lt;/p&gt;

&lt;h2 id=&#34;enabling-mathjax&#34;&gt;Enabling MathJax&lt;/h2&gt;

&lt;p&gt;The first step is to enable MathJax on pages that you would like to have typeset math. There are multiple ways to do this (adventerous readers can consult the &lt;a href=&#34;http://docs.mathjax.org/en/latest/configuration.html&#34;&gt;Loading and Configuring&lt;/a&gt; section of the MathJax documentation for additional methods of including MathJax), but the easiest way is to use the secure MathJax CDN by including the following HTML snippet in the source of a page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;
  src=&amp;quot;https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One way to ensure that this code is included in all pages is to put it in one of the templates that live in the &lt;code&gt;layouts/partials/&lt;/code&gt; directory. For example, I have included this in the bottom of my template &lt;code&gt;footer.html&lt;/code&gt; because I know that the footer will be included in every page of my website.&lt;/p&gt;

&lt;h3 id=&#34;options-and-features&#34;&gt;Options and Features&lt;/h3&gt;

&lt;p&gt;MathJax is a stable open-source library with many features. I encourage the interested reader to view the &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html&#34;&gt;MathJax Documentation&lt;/a&gt;, specifically the sections on &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html#basic-usage&#34;&gt;Basic Usage&lt;/a&gt; and &lt;a href=&#34;http://docs.mathjax.org/en/latest/index.html#mathjax-configuration-options&#34;&gt;MathJax Configuration Options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;issues-with-markdown&#34;&gt;Issues with Markdown&lt;/h2&gt;

&lt;p&gt;After enabling MathJax, any math entered in-between proper markers (see documentation) will be processed and typeset in the web page. One issue that comes up, however, with Markdown is that the underscore character (&lt;code&gt;_&lt;/code&gt;) is interpreted by Markdown as a way to wrap text in &lt;code&gt;emph&lt;/code&gt; blocks while LaTeX (MathJax) interprets the underscore as a way to create a subscript. This &amp;ldquo;double speak&amp;rdquo; of the underscore can result in some unexpected and unwanted behavior.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;There are multiple ways to remedy this problem. One solution is to simply escape each underscore in your math code by entering &lt;code&gt;\_&lt;/code&gt; instead of &lt;code&gt;_&lt;/code&gt;. This can become quite tedious if the equations you are entering are full of subscripts.&lt;/p&gt;

&lt;p&gt;Another option is to tell Markdown to treat the MathJax code as verbatim code and not process it. One way to do this is to wrap the math expression inside a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; block. Markdown would ignore these sections and they would get passed directly on to MathJax and processed correctly. This works great for display style mathematics, but for inline math expressions the line break induced by the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is not acceptable. The syntax for instructing Markdown to treat inline text as verbatim is by wrapping it in backticks (&lt;code&gt;`&lt;/code&gt;). You might have noticed, however, that the text included in between backticks is rendered differently than standard text (on this site these are items highlighted in red). To get around this problem, we could create a new CSS entry that would apply standard styling to all inline verbatim text that includes MathJax code. Below I will show the HTML and CSS source that would accomplish this (note this solution was adapted from &lt;a href=&#34;http://doswa.com/2011/07/20/mathjax-in-markdown.html&#34;&gt;this blog post&lt;/a&gt;&amp;mdash;all credit goes to the original author).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
  MathJax.Hub.Queue(function() {
    // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a
    // hack to overcome a shortcoming of Markdown. Discussion at
    // https://github.com/mojombo/jekyll/issues/199
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &amp;lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, this content should be included in the HTML source of each page that will be using MathJax. The next code snippet contains the CSS that is used to have verbatim MathJax blocks render with the same font style as the body of the page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;code.has-jax {font: inherit;
              font-size: 100%;
              background: inherit;
              border: inherit;
              color: #515151;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the CSS snippet, notice the line &lt;code&gt;color: #515151;&lt;/code&gt;. &lt;code&gt;#515151&lt;/code&gt; is the value assigned to the &lt;code&gt;color&lt;/code&gt; attribute of the &lt;code&gt;body&lt;/code&gt; class in my CSS. In order for the equations to fit in with the body of a web page, this value should be the same as the color of the body.&lt;/p&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;With this setup, everything is in place for a natural usage of MathJax on pages generated using Hugo. In order to include inline mathematics, just put LaTeX code in between &lt;code&gt;`$ TeX Code $`&lt;/code&gt; or &lt;code&gt;`\( TeX Code \)`&lt;/code&gt;. To include display style mathematics, just put LaTeX code in between &lt;code&gt;&amp;lt;div&amp;gt;$$TeX Code$$&amp;lt;/div&amp;gt;&lt;/code&gt;. All the math will be properly typeset and displayed within your Hugo generated web page!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://fizarbd.github.io/web/tutorials/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/tutorials/migrate-from-jekyll/</guid>
      <description>

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;http://fizarbd.github.io/web/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;http://fizarbd.github.io/web/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;http://fizarbd.github.io/web/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION = 
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i    
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1      
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link 
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link 
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>