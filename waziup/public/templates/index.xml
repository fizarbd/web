<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Templates-rsses on Waziup github platform test</title>
    <link>http://fizarbd.github.io/web/templates/index.xml</link>
    <description>Recent content in Templates-rsses on Waziup github platform test</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Jul 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://fizarbd.github.io/web/templates/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo Templates</title>
      <link>http://fizarbd.github.io/web/templates/overview/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/overview/</guid>
      <description>

&lt;p&gt;Hugo uses the excellent Go html/template library for its template engine.
It is an extremely lightweight engine that provides a very small amount of
logic. In our experience it is just the right amount of logic to be able
to create a good static website.&lt;/p&gt;

&lt;p&gt;While Hugo has a number of different template roles, most complete
websites can be built using just a small number of template files.
Please don’t be afraid of the variety of different template roles. They
enable Hugo to build very complicated sites. Most sites will only
need to create a &lt;a href=&#34;http://fizarbd.github.io/web/templates/content&#34;&gt;/layouts/_default/single.html&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://fizarbd.github.io/web/templates/list&#34;&gt;/layouts/_default/list.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are new to Go&amp;rsquo;s templates, the &lt;a href=&#34;http://fizarbd.github.io/web/layout/go-templates&#34;&gt;Go Template Primer&lt;/a&gt;
is a great place to start.&lt;/p&gt;

&lt;p&gt;If you are familiar with Go’s templates, Hugo provides some &lt;a href=&#34;http://fizarbd.github.io/web/templates/functions&#34;&gt;additional
template functions&lt;/a&gt; and &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables&#34;&gt;variables&lt;/a&gt; you will want to be familiar
with.&lt;/p&gt;

&lt;h2 id=&#34;primary-template-roles&#34;&gt;Primary Template roles&lt;/h2&gt;

&lt;p&gt;There are 3 primary kinds of templates that Hugo works with.&lt;/p&gt;

&lt;h3 id=&#34;single-templates-content&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/content&#34;&gt;Single&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Render a single piece of content&lt;/p&gt;

&lt;h3 id=&#34;list-templates-list&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/list&#34;&gt;List&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Page that list multiple pieces of content&lt;/p&gt;

&lt;h3 id=&#34;homepage-templates-homepage&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/homepage/&#34;&gt;Homepage&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The homepage of your site&lt;/p&gt;

&lt;h2 id=&#34;supporting-template-roles-optional&#34;&gt;Supporting Template Roles (optional)&lt;/h2&gt;

&lt;p&gt;Hugo also has additional kinds of templates all of which are optional&lt;/p&gt;

&lt;h3 id=&#34;partial-templates-templates-partials&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/partials&#34;&gt;Partial Templates&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Common page parts to be included in the above mentioned templates&lt;/p&gt;

&lt;h3 id=&#34;content-views-templates-views&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/views&#34;&gt;Content Views&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Different ways of rendering a (single) content type&lt;/p&gt;

&lt;h3 id=&#34;taxonomy-terms-templates-terms&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/terms&#34;&gt;Taxonomy Terms&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A list of the terms used for a specific taxonomy, e.g. a Tag cloud&lt;/p&gt;

&lt;h2 id=&#34;other-templates-generally-unnecessary&#34;&gt;Other Templates (generally unnecessary)&lt;/h2&gt;

&lt;h3 id=&#34;rss-templates-rss&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/rss/&#34;&gt;RSS&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Used to render all rss documents&lt;/p&gt;

&lt;h3 id=&#34;sitemap-templates-sitemap&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/sitemap/&#34;&gt;Sitemap&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Used to render the XML sitemap&lt;/p&gt;

&lt;h3 id=&#34;404-templates-404&#34;&gt;&lt;a href=&#34;http://fizarbd.github.io/web/templates/404&#34;&gt;404&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This template will create a 404.html page used when hosting on GitHub Pages&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Template Primer</title>
      <link>http://fizarbd.github.io/web/templates/go-templates/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/go-templates/</guid>
      <description>

&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks, you will find a lot of
similarities in Go templates.&lt;/p&gt;

&lt;p&gt;This document is a brief primer on using Go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;Go docs&lt;/a&gt;
go into more depth and cover features that aren&amp;rsquo;t mentioned here.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-go-templates&#34;&gt;Introduction to Go Templates&lt;/h2&gt;

&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.&lt;/p&gt;

&lt;p&gt;A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;Go docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;Go lang templates are HTML files with the addition of variables and
functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling the &lt;code&gt;add&lt;/code&gt; function with input of 1, 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Each Go template has a struct (object) made available to it. In Hugo, each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;http://fizarbd.github.io/web/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go template ships with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;http://fizarbd.github.io/web/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Adding numbers&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Comparing numbers&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ lt 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(There are more boolean operators, detailed in the
&lt;a href=&#34;http://golang.org/pkg/text/template/#hdr-Functions&#34;&gt;template documentation&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;includes&#34;&gt;Includes&lt;/h2&gt;

&lt;p&gt;When including another template, you will pass to it the data it will be
able to access. To pass along the current context, please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;partials/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, starting with Hugo v0.12, you may also use the &lt;code&gt;partial&lt;/code&gt; call
for &lt;a href=&#34;http://fizarbd.github.io/web/templates/partials/&#34;&gt;partial templates&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logic&#34;&gt;Logic&lt;/h2&gt;

&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;

&lt;h3 id=&#34;iteration&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Just like in Go, the Go templates make heavy use of &lt;code&gt;range&lt;/code&gt; to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; &amp;amp; &lt;code&gt;and&lt;/code&gt; provide the framework for handling conditional
logic in Go Templates. Like &lt;code&gt;range&lt;/code&gt;, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1: &lt;code&gt;if&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: &lt;code&gt;if&lt;/code&gt; … &lt;code&gt;else&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 3: &lt;code&gt;and&lt;/code&gt; &amp;amp; &lt;code&gt;or&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 4: &lt;code&gt;with&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An alternative way of writing &amp;ldquo;&lt;code&gt;if&lt;/code&gt;&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;&lt;code&gt;with&lt;/code&gt;&amp;rdquo; instead. &lt;code&gt;with&lt;/code&gt; rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;

&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 5: &lt;code&gt;if&lt;/code&gt; … &lt;code&gt;else if&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes&#34;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from Unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;

&lt;p&gt;Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;

&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It does look odd to place the &lt;code&gt;if&lt;/code&gt; at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be rewritten as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;internet-explorer-conditional-comments-using-pipes&#34;&gt;Internet Explorer conditional comments using Pipes&lt;/h3&gt;

&lt;p&gt;By default, Go Templates remove HTML comments from output. This has the unfortunate side effect of removing Internet Explorer conditional comments. As a workaround, use something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;&amp;lt;!--[if lt IE 9]&amp;gt;&amp;quot; | safeHtml }}
  &amp;lt;script src=&amp;quot;html5shiv.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
{{ &amp;quot;&amp;lt;![endif]--&amp;gt;&amp;quot; | safeHtml }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;context-a-k-a-the-dot&#34;&gt;Context (a.k.a. the dot)&lt;/h2&gt;

&lt;p&gt;The most easily overlooked concept to understand about Go templates is that &lt;code&gt;{{ . }}&lt;/code&gt;
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed.
&lt;code&gt;.&lt;/code&gt; will no longer refer to the data available to the entire page. If you need
to
access this from within the loop, you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how once we have entered the loop the value of &lt;code&gt;{{ . }}&lt;/code&gt; has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;

&lt;h1 id=&#34;hugo-parameters&#34;&gt;Hugo Parameters&lt;/h1&gt;

&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;

&lt;h2 id=&#34;using-content-page-parameters&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;

&lt;p&gt;In each piece of content, you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;http://fizarbd.github.io/web/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;

&lt;p&gt;Here is the example front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-site-config-parameters&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;

&lt;p&gt;In your top-level configuration file (e.g., &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in partials.&lt;/p&gt;

&lt;p&gt;For instance, you might declare:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative way of writing the &amp;ldquo;&lt;code&gt;if&lt;/code&gt;&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;&lt;code&gt;with&lt;/code&gt;&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;template-example-show-only-upcoming-events&#34;&gt;Template example: Show only upcoming events&lt;/h1&gt;

&lt;p&gt;Go allows you to do more than what&amp;rsquo;s shown here.  Using Hugo&amp;rsquo;s
&lt;a href=&#34;http://fizarbd.github.io/web/templates/functions/#toc_4&#34;&gt;&lt;code&gt;where&lt;/code&gt;&lt;/a&gt; function and Go built-ins, we can list
only the items from &lt;code&gt;content/events/&lt;/code&gt; whose date (set in the front matter) is in
the future:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h4&amp;gt;Upcoming Events&amp;lt;/h4&amp;gt;
&amp;lt;ul class=&amp;quot;upcoming-events&amp;quot;&amp;gt;
{{ range where .Data.Pages.ByDate &amp;quot;Section&amp;quot; &amp;quot;events&amp;quot; }}
  {{ if ge .Date.Unix .Now.Unix }}
    &amp;lt;li&amp;gt;&amp;lt;span class=&amp;quot;event-type&amp;quot;&amp;gt;{{ .Type | title }} —&amp;lt;/span&amp;gt;
      {{ .Title }}
      on &amp;lt;span class=&amp;quot;event-date&amp;quot;&amp;gt;
      {{ .Date.Format &amp;quot;2 January at 3:04pm&amp;quot; }}&amp;lt;/span&amp;gt;
      at {{ .Params.place }}
    &amp;lt;/li&amp;gt;
  {{ end }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Template Functions</title>
      <link>http://fizarbd.github.io/web/templates/functions/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/functions/</guid>
      <description>

&lt;p&gt;Hugo uses the excellent Go html/template library for its template engine.
It is an extremely lightweight engine that provides a very small amount of
logic. In our experience it is just the right amount of logic to be able
to create a good static website.&lt;/p&gt;

&lt;p&gt;Go templates are lightweight but extensible. Hugo has added the following
functions to the basic template logic.&lt;/p&gt;

&lt;p&gt;(Go itself supplies built-in functions, including comparison operators
and other basic tools; these are listed in the
&lt;a href=&#34;http://golang.org/pkg/text/template/#hdr-Functions&#34;&gt;Go template documentation&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;general&#34;&gt;General&lt;/h2&gt;

&lt;h3 id=&#34;isset&#34;&gt;isset&lt;/h3&gt;

&lt;p&gt;Return true if the parameter is set.
Takes either a slice, array or channel and an index or a map and a key as input.&lt;/p&gt;

&lt;p&gt;e.g. {{ if isset .Params &amp;ldquo;project_url&amp;rdquo; }} {{ index .Params &amp;ldquo;project_url&amp;rdquo; }}{{ end }}&lt;/p&gt;

&lt;h3 id=&#34;echoparam&#34;&gt;echoParam&lt;/h3&gt;

&lt;p&gt;If parameter is set, then echo it.&lt;/p&gt;

&lt;p&gt;e.g. {{echoParam .Params &amp;ldquo;project_url&amp;rdquo; }}&lt;/p&gt;

&lt;h3 id=&#34;eq&#34;&gt;eq&lt;/h3&gt;

&lt;p&gt;Return true if the parameters are equal.&lt;/p&gt;

&lt;p&gt;e.g.
    {{ if eq .Section &amp;ldquo;blog&amp;rdquo; }}current{{ end}}&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;first&#34;&gt;first&lt;/h3&gt;

&lt;p&gt;Slices an array to only the first X elements.&lt;/p&gt;

&lt;p&gt;Works on &lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;lists&lt;/a&gt;, &lt;a href=&#34;http://fizarbd.github.io/web/taxonomies/displaying/&#34;&gt;taxonomies&lt;/a&gt;, &lt;a href=&#34;http://fizarbd.github.io/web/templates/terms/&#34;&gt;terms&lt;/a&gt;, &lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e.g.
    {{ range first 10 .Data.Pages }}
        {{ .Render &amp;ldquo;summary&amp;rdquo;}}
    {{ end }}&lt;/p&gt;

&lt;h3 id=&#34;where&#34;&gt;where&lt;/h3&gt;

&lt;p&gt;Filters an array to only elements containing a matching value for a given field.&lt;/p&gt;

&lt;p&gt;Works on &lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;lists&lt;/a&gt;, &lt;a href=&#34;http://fizarbd.github.io/web/taxonomies/displaying/&#34;&gt;taxonomies&lt;/a&gt;, &lt;a href=&#34;http://fizarbd.github.io/web/templates/terms/&#34;&gt;terms&lt;/a&gt;, &lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;groups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot; }}
   {{ .Content}}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;where and first can be stacked&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 5 (where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot;) }}
   {{ .Content}}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;in&#34;&gt;in&lt;/h3&gt;

&lt;p&gt;Checks if an element is in an array (or slice) and returns a boolean.  The elements supported are strings, integers and floats (only float64 will match as expected).  In addition, it can also check if a substring exists in a string.&lt;/p&gt;

&lt;p&gt;e.g.
    {{ if in .Params.tags &amp;ldquo;Git&amp;rdquo; }}Follow me on GitHub!{{ end }}
or
    {{ if in &amp;ldquo;this string contains a substring&amp;rdquo; &amp;ldquo;substring&amp;rdquo; }}Substring found!{{ end }}&lt;/p&gt;

&lt;h3 id=&#34;intersect&#34;&gt;intersect&lt;/h3&gt;

&lt;p&gt;Given two arrays (or slices), this function will return the common elements in the arrays.  The elements supported are strings, integers and floats (only float64).&lt;/p&gt;

&lt;p&gt;A useful example of this functionality is a &amp;lsquo;similar posts&amp;rsquo; block.  Create a list of links to posts where any of the tags in the current post match any tags in other posts.&lt;/p&gt;

&lt;p&gt;e.g.
    &lt;ul&gt;
    {{ $page_link := .Permalink }}
    {{ $tags := .Params.tags }}
    {{ range .Site.Recent }}
        {{ $page := . }}
        {{ $has_common_tags := intersect $tags .Params.tags | len | lt 0 }}
        {{ if and $has_common_tags (ne $page_link $page.Permalink) }}
            &lt;li&gt;&lt;a href=&#34;{{ $page.Permalink }}&#34;&gt;{{ $page.Title }}&lt;/a&gt;&lt;/li&gt;
        {{ end }}
    {{ end }}
    &lt;/ul&gt;&lt;/p&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;h3 id=&#34;add&#34;&gt;add&lt;/h3&gt;

&lt;p&gt;Adds two integers.&lt;/p&gt;

&lt;p&gt;e.g. {{add 1 2}} → 3&lt;/p&gt;

&lt;h3 id=&#34;sub&#34;&gt;sub&lt;/h3&gt;

&lt;p&gt;Subtracts two integers.&lt;/p&gt;

&lt;p&gt;e.g. {{sub 3 2}} → 1&lt;/p&gt;

&lt;h3 id=&#34;div&#34;&gt;div&lt;/h3&gt;

&lt;p&gt;Divides two integers.&lt;/p&gt;

&lt;p&gt;e.g. {{div 6 3}} → 2&lt;/p&gt;

&lt;h3 id=&#34;mul&#34;&gt;mul&lt;/h3&gt;

&lt;p&gt;Multiplies two integers.&lt;/p&gt;

&lt;p&gt;e.g. {{mul 2 3}} → 6&lt;/p&gt;

&lt;h3 id=&#34;mod&#34;&gt;mod&lt;/h3&gt;

&lt;p&gt;Modulus of two integers.&lt;/p&gt;

&lt;p&gt;e.g. {{mod 15 3}} → 0&lt;/p&gt;

&lt;h3 id=&#34;modbool&#34;&gt;modBool&lt;/h3&gt;

&lt;p&gt;Boolean of modulus of two integers.
true if modulus is 0.&lt;/p&gt;

&lt;p&gt;e.g. {{modBool 15 3}} → true&lt;/p&gt;

&lt;h2 id=&#34;strings&#34;&gt;Strings&lt;/h2&gt;

&lt;h3 id=&#34;urlize&#34;&gt;urlize&lt;/h3&gt;

&lt;p&gt;Takes a string and sanitizes it for usage in URLs, converts spaces to &amp;ldquo;-&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;e.g. &amp;lt;a href=&amp;ldquo;/tags/{{ . | urlize }}&amp;rdquo;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&lt;/p&gt;

&lt;h3 id=&#34;safehtml&#34;&gt;safeHtml&lt;/h3&gt;

&lt;p&gt;Declares the provided string as &amp;ldquo;safe&amp;rdquo; so Go templates will not filter it.&lt;/p&gt;

&lt;p&gt;e.g. {{ .Params.CopyrightHTML | safeHtml }}&lt;/p&gt;

&lt;h3 id=&#34;lower&#34;&gt;lower&lt;/h3&gt;

&lt;p&gt;Convert all characters in string to lowercase.&lt;/p&gt;

&lt;p&gt;e.g. {{lower &amp;ldquo;BatMan&amp;rdquo;}} → &amp;ldquo;batman&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;upper&#34;&gt;upper&lt;/h3&gt;

&lt;p&gt;Convert all characters in string to uppercase.&lt;/p&gt;

&lt;p&gt;e.g. {{upper &amp;ldquo;BatMan&amp;rdquo;}} → &amp;ldquo;BATMAN&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;title&#34;&gt;title&lt;/h3&gt;

&lt;p&gt;Convert all characters in string to titlecase.&lt;/p&gt;

&lt;p&gt;e.g. {{title &amp;ldquo;BatMan&amp;rdquo;}} → &amp;ldquo;Batman&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;highlight&#34;&gt;highlight&lt;/h3&gt;

&lt;p&gt;Take a string of code and a language, uses Pygments to return the syntax
highlighted code in HTML. Used in the &lt;a href=&#34;http://fizarbd.github.io/web/extras/highlighting&#34;&gt;highlight shortcode&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Template Variables</title>
      <link>http://fizarbd.github.io/web/templates/variables/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/variables/</guid>
      <description>

&lt;p&gt;Hugo makes a set of values available to the templates. Go templates are context based. The following
are available in the context for the templates.&lt;/p&gt;

&lt;h2 id=&#34;page-variables&#34;&gt;Page Variables&lt;/h2&gt;

&lt;p&gt;The following is a list of most of the accessible variables which can be
defined for a piece of content. Many of these will be defined in the front
matter, content or derived from file location.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.Title&lt;/strong&gt;  The title for the content.&lt;br&gt;
&lt;strong&gt;.Content&lt;/strong&gt; The content itself, defined below the front matter.&lt;br&gt;
&lt;strong&gt;.Summary&lt;/strong&gt; A generated summary of the content for easily showing a snippet in a summary view. Note that the breakpoint can be set manually by inserting &lt;em&gt;&amp;#x3C;!&amp;ndash;more&amp;ndash;&amp;#x3E;&lt;/em&gt; at the appropriate place in the content page.&lt;br&gt;
&lt;strong&gt;.Description&lt;/strong&gt; The description for the content.&lt;br&gt;
&lt;strong&gt;.Keywords&lt;/strong&gt; The meta keywords for this content.&lt;br&gt;
&lt;strong&gt;.Date&lt;/strong&gt; The date the content is associated with.&lt;br&gt;
&lt;strong&gt;.PublishDate&lt;/strong&gt; The date the content is published on.&lt;br&gt;
&lt;strong&gt;.Type&lt;/strong&gt; The content &lt;a href=&#34;http://fizarbd.github.io/web/content/types/&#34;&gt;type&lt;/a&gt; (e.g. post)&lt;br&gt;
&lt;strong&gt;.Section&lt;/strong&gt; The &lt;a href=&#34;http://fizarbd.github.io/web/content/sections/&#34;&gt;section&lt;/a&gt; this content belongs to&lt;br&gt;
&lt;strong&gt;.Permalink&lt;/strong&gt; The Permanent link for this page.&lt;br&gt;
&lt;strong&gt;.RelPermalink&lt;/strong&gt; The Relative permanent link for this page.&lt;br&gt;
&lt;strong&gt;.LinkTitle&lt;/strong&gt; Access when creating links to this content. Will use linktitle if set in front-matter, else title&lt;br&gt;
&lt;strong&gt;.Taxonomies&lt;/strong&gt; These will use the field name of the plural form of the index (see tags and categories above)&lt;br&gt;
&lt;strong&gt;.RSSLink&lt;/strong&gt; Link to the indexes&amp;rsquo; rss link &lt;br&gt;
&lt;strong&gt;.TableOfContents&lt;/strong&gt; The rendered table of contents for this content&lt;br&gt;
&lt;strong&gt;.Prev&lt;/strong&gt; Pointer to the previous content (based on pub date)&lt;br&gt;
&lt;strong&gt;.Next&lt;/strong&gt; Pointer to the following content (based on pub date)&lt;br&gt;
&lt;strong&gt;.FuzzyWordCount&lt;/strong&gt; The approximate number of words in the content.&lt;br&gt;
&lt;strong&gt;.WordCount&lt;/strong&gt; The number of words in the content.&lt;br&gt;
&lt;strong&gt;.ReadingTime&lt;/strong&gt; The estimated time it takes to read the content in minutes.&lt;br&gt;
&lt;strong&gt;.Weight&lt;/strong&gt; Assigned weight (in the front matter) to this content, used in sorting.&lt;br&gt;
&lt;strong&gt;.IsNode&lt;/strong&gt; Always false for pages.&lt;br&gt;
&lt;strong&gt;.IsPage&lt;/strong&gt; Always true for page.&lt;br&gt;
&lt;strong&gt;.Site&lt;/strong&gt; See site variables below&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;page-params&#34;&gt;Page Params&lt;/h2&gt;

&lt;p&gt;Any other value defined in the front matter, including indexes will be made available under &lt;code&gt;.Params&lt;/code&gt;.
Take for example I&amp;rsquo;m using tags and categories as my indexes. The following would be how I would access them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.Params.tags&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;.Params.categories&lt;/strong&gt; &lt;br&gt;
&lt;br&gt;
&lt;strong&gt;All Params are only accessible using all lowercase characters&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;node-variables&#34;&gt;Node Variables&lt;/h2&gt;

&lt;p&gt;In Hugo a node is any page not rendered directly by a content file. This
includes indexes, lists and the homepage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.Title&lt;/strong&gt;  The title for the content.&lt;br&gt;
&lt;strong&gt;.Date&lt;/strong&gt; The date the content is published on.&lt;br&gt;
&lt;strong&gt;.Permalink&lt;/strong&gt; The Permanent link for this node&lt;br&gt;
&lt;strong&gt;.Url&lt;/strong&gt; The relative url for this node.&lt;br&gt;
&lt;strong&gt;.RSSLink&lt;/strong&gt; Link to the indexes&amp;rsquo; rss link &lt;br&gt;
&lt;strong&gt;.Data&lt;/strong&gt; The data specific to this type of node.&lt;br&gt;
&lt;strong&gt;.IsNode&lt;/strong&gt; Always true for nodes.&lt;br&gt;
&lt;strong&gt;.IsPage&lt;/strong&gt; Always false for nodes.&lt;br&gt;
&lt;strong&gt;.Site&lt;/strong&gt; See site variables below&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;site-variables&#34;&gt;Site Variables&lt;/h2&gt;

&lt;p&gt;Also available is &lt;code&gt;.Site&lt;/code&gt; which has the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.Site.BaseUrl&lt;/strong&gt; The base URL for the site as defined in the config.json file.&lt;br&gt;
&lt;strong&gt;.Site.Taxonomies&lt;/strong&gt; The indexes for the entire site.&lt;br&gt;
&lt;strong&gt;.Site.LastChange&lt;/strong&gt; The date of the last change of the most recent content.&lt;br&gt;
&lt;strong&gt;.Site.Recent&lt;/strong&gt; Array of all content ordered by Date, newest first.&lt;br&gt;
&lt;strong&gt;.Site.Params&lt;/strong&gt; A container holding the values from &lt;code&gt;params&lt;/code&gt; in your site configuration file.&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Content Template</title>
      <link>http://fizarbd.github.io/web/templates/content/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/content/</guid>
      <description>

&lt;p&gt;The primary view of content in Hugo is the single view. Hugo, for every
Markdown file provided, will render it with a single template.&lt;/p&gt;

&lt;h2 id=&#34;which-template-will-be-rendered&#34;&gt;Which Template will be rendered?&lt;/h2&gt;

&lt;p&gt;Hugo uses a set of rules to figure out which template to use when
rendering a specific page.&lt;/p&gt;

&lt;p&gt;Hugo will use the following prioritized list. If a file isn’t present,
then the next one in the list will be used. This enables you to craft
specific layouts when you want to without creating more templates
than necessary. For most sites only the _default file at the end of
the list will be needed.&lt;/p&gt;

&lt;p&gt;Users can specify the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;layout&lt;/code&gt; in the &lt;a href=&#34;http://fizarbd.github.io/web/content/front-matter&#34;&gt;front-matter&lt;/a&gt;. &lt;code&gt;Section&lt;/code&gt;
is determined based on the content file’s location. If &lt;code&gt;type&lt;/code&gt; is provide,
it will be used instead of &lt;code&gt;section&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;single&#34;&gt;Single&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/&lt;code&gt;TYPE&lt;/code&gt;-or-&lt;code&gt;SECTION&lt;/code&gt;/&lt;code&gt;LAYOUT&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/&lt;code&gt;TYPE&lt;/code&gt;-or-&lt;code&gt;SECTION&lt;/code&gt;/single.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/single.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/&lt;code&gt;TYPE&lt;/code&gt;-or-&lt;code&gt;SECTION&lt;/code&gt;/&lt;code&gt;LAYOUT&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/&lt;code&gt;TYPE&lt;/code&gt;-or-&lt;code&gt;SECTION&lt;/code&gt;/single.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/single.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-single-template-file&#34;&gt;Example Single Template File&lt;/h2&gt;

&lt;p&gt;Content pages are of the type &amp;ldquo;page&amp;rdquo; and have all the &lt;a href=&#34;http://fizarbd.github.io/web/layout/variables/&#34;&gt;page
variables&lt;/a&gt; and &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;site
variables&lt;/a&gt; available to use in the templates.&lt;/p&gt;

&lt;p&gt;In the following examples we have created two different content types as well as
a default content type.&lt;/p&gt;

&lt;p&gt;The default content template to be used in the event that a specific
template has not been provided for that type. The default type works the
same as the other types, but the directory must be called &amp;ldquo;_default&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ layouts/
  ▾ _default/
      single.html
  ▾ post/
      single.html
  ▾ project/
      single.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;post-single-html&#34;&gt;post/single.html&lt;/h2&gt;

&lt;p&gt;This content template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;.
It makes use of &lt;a href=&#34;http://fizarbd.github.io/web/layout/partials&#34;&gt;partial templates&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}
{{ $baseurl := .Site.BaseUrl }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;div&amp;gt;
        &amp;lt;article id=&amp;quot;content&amp;quot;&amp;gt;
           {{ .Content }}
        &amp;lt;/article&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;aside id=&amp;quot;meta&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;
    &amp;lt;section&amp;gt;
      &amp;lt;h4 id=&amp;quot;date&amp;quot;&amp;gt; {{ .Date.Format &amp;quot;Mon Jan 2, 2006&amp;quot; }} &amp;lt;/h4&amp;gt;
      &amp;lt;h5 id=&amp;quot;wc&amp;quot;&amp;gt; {{ .FuzzyWordCount }} Words &amp;lt;/h5&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;ul id=&amp;quot;categories&amp;quot;&amp;gt;
      {{ range .Params.topics }}
        &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ $baseurl }}/topics/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
      {{ end }}
    &amp;lt;/ul&amp;gt;
    &amp;lt;ul id=&amp;quot;tags&amp;quot;&amp;gt;
      {{ range .Params.tags }}
        &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
      {{ end }}
    &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        {{ if .Prev }}
          &amp;lt;a class=&amp;quot;previous&amp;quot; href=&amp;quot;{{.Prev.Permalink}}&amp;quot;&amp;gt; {{.Prev.Title}}&amp;lt;/a&amp;gt;
        {{ end }}
        {{ if .Next }}
          &amp;lt;a class=&amp;quot;next&amp;quot; href=&amp;quot;{{.Next.Permalink}}&amp;quot;&amp;gt; {{.Next.Title}}&amp;lt;/a&amp;gt;
        {{ end }}
    &amp;lt;/div&amp;gt;
&amp;lt;/aside&amp;gt;

{{ partial &amp;quot;disqus.html&amp;quot; . }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;project-single-html&#34;&gt;project/single.html&lt;/h2&gt;

&lt;p&gt;This content template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;.
It makes use of &lt;a href=&#34;http://fizarbd.github.io/web/layout/partials&#34;&gt;partial templates&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}
{{ $baseurl := .Site.BaseUrl }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;div&amp;gt;
        &amp;lt;article id=&amp;quot;content&amp;quot;&amp;gt;
           {{ .Content }}
        &amp;lt;/article&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;aside id=&amp;quot;meta&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;
    &amp;lt;section&amp;gt;
      &amp;lt;h4 id=&amp;quot;date&amp;quot;&amp;gt; {{ .Date.Format &amp;quot;Mon Jan 2, 2006&amp;quot; }} &amp;lt;/h4&amp;gt;
      &amp;lt;h5 id=&amp;quot;wc&amp;quot;&amp;gt; {{ .FuzzyWordCount }} Words &amp;lt;/h5&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;ul id=&amp;quot;categories&amp;quot;&amp;gt;
      {{ range .Params.topics }}
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ $baseurl }}/topics/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
      {{ end }}
    &amp;lt;/ul&amp;gt;
    &amp;lt;ul id=&amp;quot;tags&amp;quot;&amp;gt;
      {{ range .Params.tags }}
        &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
      {{ end }}
    &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/aside&amp;gt;

{{if isset .Params &amp;quot;project_url&amp;quot; }}
&amp;lt;div id=&amp;quot;ribbon&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;{{ index .Params &amp;quot;project_url&amp;quot; }}&amp;quot; rel=&amp;quot;me&amp;quot;&amp;gt;Fork me on GitHub&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
{{ end }}

{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how the project/single.html template uses an additional parameter unique
to this template. This doesn&amp;rsquo;t need to be defined ahead of time. If the key is
present in the front matter than it can be used in the template. To
easily generate new content of this type with these keys ready use
&lt;a href=&#34;http://fizarbd.github.io/web/content/archetypes&#34;&gt;content archetypes&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Content List Template</title>
      <link>http://fizarbd.github.io/web/templates/list/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/list/</guid>
      <description>

&lt;p&gt;A list template is any template that will be used to render multiple pieces of
content in a single HTML page (with the exception of the &lt;a href=&#34;http://fizarbd.github.io/web/layout/homepage&#34;&gt;homepage&lt;/a&gt; which has a
dedicated template).&lt;/p&gt;

&lt;p&gt;We are using the term list in its truest sense, a sequential arrangement
of material, especially in alphabetical or numerical order. Hugo uses
list templates to render anyplace where content is being listed such as
taxonomies and sections.&lt;/p&gt;

&lt;h2 id=&#34;which-template-will-be-rendered&#34;&gt;Which Template will be rendered?&lt;/h2&gt;

&lt;p&gt;Hugo uses a set of rules to figure out which template to use when
rendering a specific page.&lt;/p&gt;

&lt;p&gt;Hugo will use the following prioritized list. If a file isn’t present,
then the next one in the list will be used. This enables you to craft
specific layouts when you want to without creating more templates
than necessary. For most sites only the _default file at the end of
the list will be needed.&lt;/p&gt;

&lt;h3 id=&#34;section-lists&#34;&gt;Section Lists&lt;/h3&gt;

&lt;p&gt;A Section will be rendered at /&lt;code&gt;SECTION&lt;/code&gt;/&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/section/&lt;code&gt;SECTION&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/section.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/section/&lt;code&gt;SECTION&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/_default/section.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;taxonomy-lists&#34;&gt;Taxonomy Lists&lt;/h3&gt;

&lt;p&gt;A Taxonomy will be rendered at /&lt;code&gt;PLURAL&lt;/code&gt;/&lt;code&gt;TERM&lt;/code&gt;/&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/taxonomy/&lt;code&gt;SINGULAR&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/taxonomy.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/taxonomy/&lt;code&gt;SINGULAR&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/_default/taxonomy.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;section-rss&#34;&gt;Section RSS&lt;/h3&gt;

&lt;p&gt;A Section’s RSS will be rendered at /&lt;code&gt;SECTION&lt;/code&gt;/index.xml&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hugo ships with its own ATOM 2.0 RSS template. In most cases this will
be sufficient, and an RSS template will not need to be provided by the
user.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hugo provides the ability for you to define any RSS type you wish, and
can have different RSS files for each section and taxonomy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/section/&lt;code&gt;SECTION&lt;/code&gt;.rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/section/&lt;code&gt;SECTION&lt;/code&gt;.rss.xml&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;taxonomy-rss&#34;&gt;Taxonomy RSS&lt;/h3&gt;

&lt;p&gt;A Taxonomy’s RSS will be rendered at /&lt;code&gt;PLURAL&lt;/code&gt;/&lt;code&gt;TERM&lt;/code&gt;/index.xml&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hugo ships with its own ATOM 2.0 RSS template. In most cases this will
be sufficient, and an RSS template will not need to be provided by the
user.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hugo provides the ability for you to define any RSS type you wish, and
can have different RSS files for each section and taxonomy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/taxonomy/&lt;code&gt;SINGULAR&lt;/code&gt;.rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/taxonomy/&lt;code&gt;SINGULAR&lt;/code&gt;.rss.xml&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;List pages are of the type &amp;ldquo;node&amp;rdquo; and have all the &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;node
variables&lt;/a&gt; and &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;site
variables&lt;/a&gt; available to use in the templates.&lt;/p&gt;

&lt;p&gt;Taxonomy pages will additionally have:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.Data.&lt;code&gt;singular&lt;/code&gt;&lt;/strong&gt; The taxonomy itself.&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-list-template-pages&#34;&gt;Example List Template Pages&lt;/h2&gt;

&lt;h3 id=&#34;example-section-template-post-html&#34;&gt;Example section template (post.html)&lt;/h3&gt;

&lt;p&gt;This content template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;.
It makes use of &lt;a href=&#34;http://fizarbd.github.io/web/templates/partials&#34;&gt;partial templates&lt;/a&gt;. All examples use a
&lt;a href=&#34;http://fizarbd.github.io/web/templates/views/&#34;&gt;view&lt;/a&gt; called either &amp;ldquo;li&amp;rdquo; or &amp;ldquo;summary&amp;rdquo; which this example site
defined.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
        &amp;lt;ul id=&amp;quot;list&amp;quot;&amp;gt;
            {{ range .Data.Pages }}
                {{ .Render &amp;quot;li&amp;quot;}}
            {{ end }}
        &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-taxonomy-template-tag-html&#34;&gt;Example taxonomy template (tag.html)&lt;/h3&gt;

&lt;p&gt;This content template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;.
It makes use of &lt;a href=&#34;http://fizarbd.github.io/web/templates/partials&#34;&gt;partial templates&lt;/a&gt;. All examples use a
&lt;a href=&#34;http://fizarbd.github.io/web/templates/views/&#34;&gt;view&lt;/a&gt; called either &amp;ldquo;li&amp;rdquo; or &amp;ldquo;summary&amp;rdquo; which this example site
defined.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
    {{ range .Data.Pages }}
        {{ .Render &amp;quot;summary&amp;quot;}}
    {{ end }}
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ordering-content&#34;&gt;Ordering Content&lt;/h2&gt;

&lt;p&gt;In the case of Hugo each list will render the content based on metadata provided in the &lt;a href=&#34;http://fizarbd.github.io/web/content/front-matter&#34;&gt;front
matter&lt;/a&gt;. See &lt;a href=&#34;http://fizarbd.github.io/web/content/ordering&#34;&gt;ordering content&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;Here are a variety of different ways you can order the content items in
your list templates:&lt;/p&gt;

&lt;h3 id=&#34;order-by-weight-date-default&#34;&gt;Order by Weight -&amp;gt; Date (default)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;order-by-weight-date&#34;&gt;Order by Weight -&amp;gt; Date&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByWeight }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;order-by-date&#34;&gt;Order by Date&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByDate }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;order-by-length&#34;&gt;Order by Length&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByLength }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;order-by-title&#34;&gt;Order by Title&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByTitle }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;order-by-linktitle&#34;&gt;Order by LinkTitle&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByLinkTitle }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .LinkTitle }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;reverse-order&#34;&gt;Reverse Order&lt;/h3&gt;

&lt;p&gt;Can be applied to any of the above. Using Date for an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.ByDate.Reverse }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;grouping-content&#34;&gt;Grouping Content&lt;/h2&gt;

&lt;p&gt;Hugo provides some grouping functions for list pages. You can use them to
group pages by Section, Date etc.&lt;/p&gt;

&lt;p&gt;Here are a variety of different ways you can group the content items in
your list templates:&lt;/p&gt;

&lt;h3 id=&#34;grouping-by-page-field&#34;&gt;Grouping by Page field&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupBy &amp;quot;Section&amp;quot; }}
&amp;lt;h3&amp;gt;{{ .Key }}&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
    {{ range .Pages }}
    &amp;lt;li&amp;gt;
    &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
    &amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
    &amp;lt;/li&amp;gt;
    {{ end }}
&amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;grouping-by-page-date&#34;&gt;Grouping by Page date&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; }}
&amp;lt;h3&amp;gt;{{ .Key }}&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
    {{ range .Pages }}
    &amp;lt;li&amp;gt;
    &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
    &amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
    &amp;lt;/li&amp;gt;
    {{ end }}
&amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;reversing-key-order&#34;&gt;Reversing Key Order&lt;/h3&gt;

&lt;p&gt;The ordering of the groups is performed by keys in alpha-numeric order (A–Z,
1–100) and in reverse chronological order (newest first) for dates.&lt;/p&gt;

&lt;p&gt;While these are logical defaults, they are not always the desired order. There
are two different syntaxes to change the order, they both work the same way, so
it’s really just a matter of preference.&lt;/p&gt;

&lt;h4 id=&#34;reverse-method&#34;&gt;Reverse method&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{{ range (.Data.Pages.GroupBy &amp;quot;Section&amp;quot;).Reverse }}
...

{{ range (.Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot;).Reverse }}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;providing-the-alternate-direction&#34;&gt;Providing the (alternate) direction&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; &amp;quot;asc&amp;quot; }}
...

{{ range .Data.Pages.GroupBy &amp;quot;Section&amp;quot; &amp;quot;desc&amp;quot; }}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ordering-pages-within-group&#34;&gt;Ordering Pages within Group&lt;/h3&gt;

&lt;p&gt;Because Grouping returns a key and a slice of pages, all of the ordering methods listed above are available.&lt;/p&gt;

&lt;p&gt;In this example I’ve ordered the groups in chronological order and the content
within each group in alphabetical order by title.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; &amp;quot;asc&amp;quot; }}
&amp;lt;h3&amp;gt;{{ .Key }}&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
    {{ range .Pages.ByTitle }}
    &amp;lt;li&amp;gt;
    &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
    &amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
    &amp;lt;/li&amp;gt;
    {{ end }}
&amp;lt;/ul&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filtering-limiting-content&#34;&gt;Filtering &amp;amp; Limiting Content&lt;/h2&gt;

&lt;p&gt;Sometimes you only want to list a subset of the available content. A common
request is to only display “Posts” on the homepage. Using the &lt;code&gt;where&lt;/code&gt; function
you can do just that.&lt;/p&gt;

&lt;h3 id=&#34;first&#34;&gt;First&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;first&lt;/code&gt; works like the &lt;code&gt;limit&lt;/code&gt; keyword in SQL. It reduces the array to only the
first X elements. It takes the array and number of elements as input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 10 .Data.Pages }}
    {{ .Render &amp;quot;summary&amp;quot;}}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;where&#34;&gt;Where&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;where&lt;/code&gt; works in a similar manner to the &lt;code&gt;where&lt;/code&gt; keyword in SQL. It selects all
elements of the slice that match the provided field and value. It takes three
arguments &amp;lsquo;array or slice of maps or structs&amp;rsquo;, &amp;lsquo;key or field name&amp;rsquo; and &amp;lsquo;match
value&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot; }}
   {{ .Content}}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;first-where-together&#34;&gt;First &amp;amp; Where Together&lt;/h3&gt;

&lt;p&gt;Using both together can be very powerful.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 5 (where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot;) }}
   {{ .Content}}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;where&lt;/code&gt; or &lt;code&gt;first&lt;/code&gt; receives invalid input or a field name that doesn’t exist they will provide an error and stop site generation.&lt;/p&gt;

&lt;p&gt;These are both template functions and work on not only
&lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;lists&lt;/a&gt;, but &lt;a href=&#34;http://fizarbd.github.io/web/taxonomies/displaying/&#34;&gt;taxonomies&lt;/a&gt;,
&lt;a href=&#34;http://fizarbd.github.io/web/templates/terms/&#34;&gt;terms&lt;/a&gt; and &lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;groups&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homepage</title>
      <link>http://fizarbd.github.io/web/templates/homepage/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/homepage/</guid>
      <description>

&lt;p&gt;The home page of a website is often formatted differently than the other
pages. In Hugo you can define your own homepage template.&lt;/p&gt;

&lt;p&gt;Homepage is of the type &amp;ldquo;node&amp;rdquo; and have all the &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;node
variables&lt;/a&gt; and &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;site
variables&lt;/a&gt; available to use in the templates.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is the only required template for building a site and useful when
bootstrapping a new site and template. It is also the only required
template when using a single page site.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In addition to the standard node variables, the homepage has access to
all site content accessible from &lt;code&gt;.Data.Pages&lt;/code&gt;. Details on how to use the
list of pages can be found in the &lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;Lists Template&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;which-template-will-be-rendered&#34;&gt;Which Template will be rendered?&lt;/h2&gt;

&lt;p&gt;Hugo uses a set of rules to figure out which template to use when
rendering a specific page.&lt;/p&gt;

&lt;p&gt;Hugo will use the following prioritized list. If a file isn’t present,
then the next one in the list will be used. This enables you to craft
specific layouts when you want to without creating more templates
than necessary. For most sites, only the _default file at the end of
the list will be needed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/index.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/single.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/index.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/list.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/single.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-index-html&#34;&gt;Example index.html&lt;/h2&gt;

&lt;p&gt;This content template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It makes use of &lt;a href=&#34;http://fizarbd.github.io/web/templates/partials&#34;&gt;partial templates&lt;/a&gt; and uses a similar approach as a &lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;List&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html class=&amp;quot;no-js&amp;quot; lang=&amp;quot;en-US&amp;quot; prefix=&amp;quot;og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;

    {{ partial &amp;quot;meta.html&amp;quot; . }}

    &amp;lt;base href=&amp;quot;{{ .Site.BaseUrl }}&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;{{ .Site.Title }}&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;
    &amp;lt;link href=&amp;quot;{{ .RSSlink }}&amp;quot; rel=&amp;quot;alternate&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; title=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt;

    {{ partial &amp;quot;head_includes.html&amp;quot; . }}
&amp;lt;/head&amp;gt;
&amp;lt;body lang=&amp;quot;en&amp;quot;&amp;gt;

{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
    {{ range first 10 .Data.Pages }}
        {{ .Render &amp;quot;summary&amp;quot;}}
    {{ end }}
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Taxonomy Terms Template</title>
      <link>http://fizarbd.github.io/web/templates/terms/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/terms/</guid>
      <description>

&lt;p&gt;A unique template is needed to create a list of the terms for a given
taxonomy. This is different from the &lt;a href=&#34;http://fizarbd.github.io/web/templates/list/&#34;&gt;list template&lt;/a&gt;
as that template is a list of content, where this is a list of meta data.&lt;/p&gt;

&lt;h2 id=&#34;which-template-will-be-rendered&#34;&gt;Which Template will be rendered?&lt;/h2&gt;

&lt;p&gt;Hugo uses a set of rules to figure out which template to use when
rendering a specific page.&lt;/p&gt;

&lt;p&gt;Hugo will use the following prioritized list. If a file isn’t present,
then the next one in the list will be used. This enables you to craft
specific layouts when you want to without creating more templates
than necessary. For most sites only the _default file at the end of
the list will be needed.&lt;/p&gt;

&lt;p&gt;A Taxonomy Terms List will be rendered at /&lt;code&gt;PLURAL&lt;/code&gt;/&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/taxonomy/&lt;code&gt;SINGLE&lt;/code&gt;.terms.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/terms.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If that neither file is found in either the /layouts or /theme/layouts
directory than hugo will not render the taxonomy terms pages. It is also
common for people to render taxonomy terms lists on other pages such as
the homepage or the sidebar (such as a tag cloud) and not have a
dedicated page for the terms.&lt;/p&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Taxonomy Terms pages are of the type &amp;ldquo;node&amp;rdquo; and have all the &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;node
variables&lt;/a&gt; and &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;site
variables&lt;/a&gt; available to use in the templates.&lt;/p&gt;

&lt;p&gt;Taxonomy Terms pages will additionally have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.Data.Singular&lt;/strong&gt; The singular name of the taxonomy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.Data.Plural&lt;/strong&gt; The plural name of the taxonomy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.Data.Terms&lt;/strong&gt; The taxonomy itself&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.Data.Terms.Alphabetical&lt;/strong&gt; The Terms alphabetized&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.Data.Terms.ByCount&lt;/strong&gt; The Terms ordered by popularity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-terms-html-file&#34;&gt;Example terms.html file&lt;/h2&gt;

&lt;p&gt;List pages are of the type &amp;ldquo;node&amp;rdquo; and have all the &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;node
variables&lt;/a&gt; and &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables/&#34;&gt;site
variables&lt;/a&gt; available to use in the templates.&lt;/p&gt;

&lt;p&gt;This content template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;.
It makes use of &lt;a href=&#34;http://fizarbd.github.io/web/templates/partials&#34;&gt;partial templates&lt;/a&gt;. The list of indexes
templates cannot use a &lt;a href=&#34;http://fizarbd.github.io/web/templates/views&#34;&gt;content view&lt;/a&gt; as they don&amp;rsquo;t display the content, but
rather information about the content.&lt;/p&gt;

&lt;p&gt;This particular template lists all of the Tags used on
&lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt; and provides a count for the number of pieces of
content tagged with each tag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.Data.Terms&lt;/code&gt; is an map of terms ⇒ [contents]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;

   &amp;lt;ul&amp;gt;
   {{ $data := .Data }}
    {{ range $key, $value := .Data.Terms }}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ $data.Plural }}/{{ $key | urlize }}&amp;quot;&amp;gt; {{ $key }} &amp;lt;/a&amp;gt; {{ len $value }} &amp;lt;/li&amp;gt;
    {{ end }}
   &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another example listing the content for each term (ordered by Date)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;

    {{ $data := .Data }}
    {{ range $key,$value := .Data.Terms.ByCount }}
    &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ $data.Plural }}/{{ $value.Name | urlize }}&amp;quot;&amp;gt; {{ $value.Name }} &amp;lt;/a&amp;gt; {{ $value.Count }} &amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
        {{ range $value.Pages.ByDate }}
        &amp;lt;li&amp;gt;
            &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
        {{ end }}
    &amp;lt;/ul&amp;gt;
    {{ end }}
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ordering&#34;&gt;Ordering&lt;/h2&gt;

&lt;p&gt;Hugo can order the meta data in two different ways. It can be ordered by the
number of content assigned to that key or alphabetically.&lt;/p&gt;

&lt;h2 id=&#34;example-indexes-html-file-alphabetical&#34;&gt;Example indexes.html file (alphabetical)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
   &amp;lt;ul&amp;gt;
   {{ $data := .Data }}
    {{ range $key, $value := .Data.Terms.Alphabetical }}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ $data.Plural }}/{{ $value.Name | urlize }}&amp;quot;&amp;gt; {{ $value.Name }} &amp;lt;/a&amp;gt; {{ $value.Count }} &amp;lt;/li&amp;gt;
    {{ end }}
   &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-indexes-html-file-ordered&#34;&gt;Example indexes.html file (ordered)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
   &amp;lt;ul&amp;gt;
   {{ $data := .Data }}
    {{ range $key, $value := .Data.Terms.ByCount }}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ $data.Plural }}/{{ $value.Name | urlize }}&amp;quot;&amp;gt; {{ $value.Name }} &amp;lt;/a&amp;gt; {{ $value.Count }} &amp;lt;/li&amp;gt;
    {{ end }}
   &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Content Views</title>
      <link>http://fizarbd.github.io/web/templates/views/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/views/</guid>
      <description>

&lt;p&gt;In addition to the &lt;a href=&#34;http://fizarbd.github.io/web/templates/content/&#34;&gt;single content template&lt;/a&gt;, Hugo can render alternative views of
your content. These are especially useful in &lt;a href=&#34;http://fizarbd.github.io/web/templates/list&#34;&gt;list templates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example you may want content of every type to be shown on the
homepage, but only a summary view of it there. Perhaps on a taxonomy
list page you would only want a bulleted list of your content. Views
make this very straightforward by delegating the rendering of each
different type of content to the content itself.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-content-view&#34;&gt;Creating a content view&lt;/h2&gt;

&lt;p&gt;To create a new view simple create a template in each of your different
content type directories with the view name. In the following example we
have created a &amp;ldquo;li&amp;rdquo; view and a &amp;ldquo;summary&amp;rdquo; view for our two content types
of post and project. As you can see these sit next to the &lt;a href=&#34;http://fizarbd.github.io/web/templates/content&#34;&gt;single
content view&lt;/a&gt; template &amp;ldquo;single.html&amp;rdquo;. You can even
provide a specific view for a given type and continue to use the
_default/single.html for the primary view.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ layouts/
  ▾ post/
      li.html
      single.html
      summary.html
  ▾ project/
      li.html
      single.html
      summary.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo also has support for a default content template to be used in the event
that a specific template has not been provided for that type. The default type
works the same as the other types, but the directory must be called &amp;ldquo;_default&amp;rdquo;.
Content views can also be defined in the &amp;ldquo;_default&amp;rdquo; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ layouts/
  ▾ _default/
      li.html
      single.html
      summary.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;which-template-will-be-rendered&#34;&gt;Which Template will be rendered?&lt;/h2&gt;

&lt;p&gt;Hugo uses a set of rules to figure out which template to use when
rendering a specific page.&lt;/p&gt;

&lt;p&gt;Hugo will use the following prioritized list. If a file isn’t present,
then the next one in the list will be used. This enables you to craft
specific layouts when you want to without creating more templates
than necessary. For most sites only the _default file at the end of
the list will be needed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/&lt;code&gt;TYPE&lt;/code&gt;/&lt;code&gt;VIEW&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/&lt;code&gt;VIEW&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/&lt;code&gt;TYPE&lt;/code&gt;/&lt;code&gt;VIEW&lt;/code&gt;.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/&lt;code&gt;view&lt;/code&gt;.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-using-views&#34;&gt;Example using views&lt;/h2&gt;

&lt;h3 id=&#34;rendering-view-inside-of-a-list&#34;&gt;rendering view inside of a list&lt;/h3&gt;

&lt;p&gt;Using the summary view (defined below) inside of a (&lt;a href=&#34;http://fizarbd.github.io/web/templates/list&#34;&gt;list
templates&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ .Render &amp;quot;summary&amp;quot;}}
{{ end }}
&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example you will notice that we have called .Render and passed in
which view to render the content with. Render is a special function available on
a content which tells the content to render itself with the provided view template.
In this example we are not using the li view. To use this we would
change the render line to &lt;code&gt;{{ .Render &amp;quot;li&amp;quot; }}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;li-html&#34;&gt;li.html&lt;/h3&gt;

&lt;p&gt;Hugo will pass the entire page object to the view template. See &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables&#34;&gt;page
variables&lt;/a&gt; for a complete list.&lt;/p&gt;

&lt;p&gt;This content template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;summary-html&#34;&gt;summary.html&lt;/h3&gt;

&lt;p&gt;Hugo will pass the entire page object to the view template. See &lt;a href=&#34;http://fizarbd.github.io/web/templates/variables&#34;&gt;page
variables&lt;/a&gt; for a complete list.&lt;/p&gt;

&lt;p&gt;This content template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;article class=&amp;quot;post&amp;quot;&amp;gt;
&amp;lt;header&amp;gt;
&amp;lt;h2&amp;gt;&amp;lt;a href=&#39;{{ .Permalink }}&#39;&amp;gt; {{ .Title }}&amp;lt;/a&amp;gt; &amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;quot;post-meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }} - {{ .FuzzyWordCount }} Words &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

{{ .Summary }}
&amp;lt;footer&amp;gt;
&amp;lt;a href=&#39;{{ .Permalink }}&#39;&amp;gt;&amp;lt;nobr&amp;gt;Read more →&amp;lt;/nobr&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Partial Templates</title>
      <link>http://fizarbd.github.io/web/templates/partials/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/partials/</guid>
      <description>

&lt;p&gt;In practice, it&amp;rsquo;s very convenient to split out common template portions into a
partial template that can be included anywhere. As you create the rest of your
templates, you will include templates from the /layout/partials directory.&lt;/p&gt;

&lt;p&gt;Partials are especially important for themes as it gives users an opportunity
to overwrite just a small part of your theme, while maintaining future compatibility.&lt;/p&gt;

&lt;p&gt;Theme developers may want to include a few partials with empty HTML
files in the theme just so end users have an easy place to inject their
customized content.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found it helpful to include a header and footer template in
partials so I can include those in all the full page layouts.  There is
nothing special about header.html and footer.html other than they seem
like good names to use for inclusion in your other templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ layouts/
  ▾ partials/
      header.html
      footer.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By ensuring that we only reference &lt;a href=&#34;http://fizarbd.github.io/web/layout/variables/&#34;&gt;variables&lt;/a&gt;
used for both nodes and pages, we can use the same partials for both.&lt;/p&gt;

&lt;h2 id=&#34;partial-vs-template&#34;&gt;Partial vs Template&lt;/h2&gt;

&lt;p&gt;Version v0.12 of Hugo introduced the &lt;code&gt;partial&lt;/code&gt; call inside the template system.
This is a change to the way partials were handled previously inside the
template system. In earlier versions, Hugo didn’t treat partials specially, and
you could include a partial template with the &lt;code&gt;template&lt;/code&gt; call in the standard
template language.&lt;/p&gt;

&lt;p&gt;With the addition of the theme system in v0.11, it became apparent that a theme
&amp;amp; override aware partial was needed.&lt;/p&gt;

&lt;p&gt;When using Hugo v0.12 and above, please use the &lt;code&gt;partial&lt;/code&gt; call (and leave out
the “partial/” path). The old approach would still work, but wouldn’t benefit from
the ability to have users override the partial theme file with local layouts.&lt;/p&gt;

&lt;h2 id=&#34;example-header-html&#34;&gt;Example header.html&lt;/h2&gt;

&lt;p&gt;This header template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html class=&amp;quot;no-js&amp;quot; lang=&amp;quot;en-US&amp;quot; prefix=&amp;quot;og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;

    {{ partial &amp;quot;meta.html&amp;quot; . }}

    &amp;lt;base href=&amp;quot;{{ .Site.BaseUrl }}&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt; {{ .Title }} : spf13.com &amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;
    {{ if .RSSlink }}&amp;lt;link href=&amp;quot;{{ .RSSlink }}&amp;quot; rel=&amp;quot;alternate&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; title=&amp;quot;{{ .Title }}&amp;quot; /&amp;gt;{{ end }}

    {{ partial &amp;quot;head_includes.html&amp;quot; . }}
&amp;lt;/head&amp;gt;
&amp;lt;body lang=&amp;quot;en&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-footer-html&#34;&gt;Example footer.html&lt;/h2&gt;

&lt;p&gt;This footer template is used for &lt;a href=&#34;http://spf13.com&#34;&gt;spf13.com&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;footer&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;
    &amp;amp;copy; 2013-14 Steve Francia.
    &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by/3.0/&amp;quot; title=&amp;quot;Creative Commons Attribution&amp;quot;&amp;gt;Some rights reserved&amp;lt;/a&amp;gt;; 
    please attribute properly and link back. Hosted by &amp;lt;a href=&amp;quot;http://servergrove.com&amp;quot;&amp;gt;ServerGrove&amp;lt;/a&amp;gt;.
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

  var _gaq = _gaq || [];
  _gaq.push([&#39;_setAccount&#39;, &#39;UA-XYSYXYSY-X&#39;]);
  _gaq.push([&#39;_trackPageview&#39;]);

  (function() {
    var ga = document.createElement(&#39;script&#39;);
    ga.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://ssl&#39; : 
        &#39;http://www&#39;) + &#39;.google-analytics.com/ga.js&#39;;
    ga.setAttribute(&#39;async&#39;, &#39;true&#39;);
    document.documentElement.firstChild.appendChild(ga);
  })();

&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For examples of referencing these templates, see &lt;a href=&#34;http://fizarbd.github.io/web/templates/content&#34;&gt;single content
templates&lt;/a&gt;, &lt;a href=&#34;http://fizarbd.github.io/web/templates/list&#34;&gt;list templates&lt;/a&gt; and &lt;a href=&#34;http://fizarbd.github.io/web/templates/homepage&#34;&gt;homepage templates&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RSS (feed) Templates</title>
      <link>http://fizarbd.github.io/web/templates/rss/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/rss/</guid>
      <description>

&lt;p&gt;Like all other templates, you can use a single RSS template to generate
all of your RSS feeds, or you can create a specific template for each
individual feed. Unlike other templates, &lt;em&gt;Hugo ships with its own ATOM
2.0 RSS template. In most cases this will be sufficient, and an RSS
template will not need to be provided by the user.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;RSS pages are of the type &amp;ldquo;node&amp;rdquo; and have all the &lt;a href=&#34;http://fizarbd.github.io/web/layout/variables/&#34;&gt;node
variables&lt;/a&gt; available to use in the templates.&lt;/p&gt;

&lt;h2 id=&#34;which-template-will-be-rendered&#34;&gt;Which Template will be rendered?&lt;/h2&gt;

&lt;p&gt;Hugo uses a set of rules to figure out which template to use when
rendering a specific page.&lt;/p&gt;

&lt;p&gt;Hugo will use the following prioritized list. If a file isn’t present,
then the next one in the list will be used. This enables you to craft
specific layouts when you want to without creating more templates
than necessary. For most sites only the _default file at the end of
the list will be needed.&lt;/p&gt;

&lt;h3 id=&#34;main-rss&#34;&gt;Main RSS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;__internal/rss.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;section-rss&#34;&gt;Section RSS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/section/&lt;code&gt;SECTION&lt;/code&gt;.rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/section/&lt;code&gt;SECTION&lt;/code&gt;.rss.xml&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;__internal/rss.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;taxonomy-rss&#34;&gt;Taxonomy RSS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/taxonomy/&lt;code&gt;SINGULAR&lt;/code&gt;.rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/taxonomy/&lt;code&gt;SINGULAR&lt;/code&gt;.rss.xml&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;__internal/rss.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuring-rss&#34;&gt;Configuring RSS&lt;/h2&gt;

&lt;p&gt;If the following are provided in the site’s config file, then they
will be included in the RSS output. Example values are provided.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;languageCode = &amp;quot;en-us&amp;quot;
copyright = &amp;quot;This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.&amp;quot;

[author]
    name = &amp;quot;My Name Here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-embedded-rss-xml&#34;&gt;The Embedded rss.xml&lt;/h2&gt;

&lt;p&gt;This is the RSS template that ships with Hugo. It adheres to the
ATOM 2.0 Spec.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;rss version=&amp;quot;2.0&amp;quot; xmlns:atom=&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&amp;gt;
  &amp;lt;channel&amp;gt;
      &amp;lt;title&amp;gt;{{ .Title }} on {{ .Site.Title }} &amp;lt;/title&amp;gt;
      &amp;lt;generator uri=&amp;quot;https://gohugo.io&amp;quot;&amp;gt;Hugo&amp;lt;/generator&amp;gt;
    &amp;lt;link&amp;gt;{{ .Permalink }}&amp;lt;/link&amp;gt;
    {{ with .Site.LanguageCode }}&amp;lt;language&amp;gt;{{.}}&amp;lt;/language&amp;gt;{{end}}
    {{ with .Site.Author.name }}&amp;lt;author&amp;gt;{{.}}&amp;lt;/author&amp;gt;{{end}}
    {{ with .Site.Copyright }}&amp;lt;copyright&amp;gt;{{.}}&amp;lt;/copyright&amp;gt;{{end}}
    &amp;lt;updated&amp;gt;{{ .Date.Format &amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot; }}&amp;lt;/updated&amp;gt;
    {{ range first 15 .Data.Pages }}
    &amp;lt;item&amp;gt;
      &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
      &amp;lt;link&amp;gt;{{ .Permalink }}&amp;lt;/link&amp;gt;
      &amp;lt;pubDate&amp;gt;{{ .Date.Format &amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot; }}&amp;lt;/pubDate&amp;gt;
      {{with .Site.Author.name}}&amp;lt;author&amp;gt;{{.}}&amp;lt;/author&amp;gt;{{end}}
      &amp;lt;guid&amp;gt;{{ .Permalink }}&amp;lt;/guid&amp;gt;
      &amp;lt;description&amp;gt;{{ .Content | html }}&amp;lt;/description&amp;gt;
    &amp;lt;/item&amp;gt;
    {{ end }}
  &amp;lt;/channel&amp;gt;
&amp;lt;/rss&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Important: Hugo will automatically add the following header line to this file
on render… please don&amp;rsquo;t include this in the template as it&amp;rsquo;s not valid HTML.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sitemap Template</title>
      <link>http://fizarbd.github.io/web/templates/sitemap/</link>
      <pubDate>Wed, 07 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/sitemap/</guid>
      <description>

&lt;p&gt;A single Sitemap template is used to generate the &lt;code&gt;sitemap.xml&lt;/code&gt; file.
Hugo automatically comes with this template file. &lt;strong&gt;No work is needed on
the users part unless they want to customize the sitemap.xml.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This page is of the type &amp;ldquo;node&amp;rdquo; and have all the &lt;a href=&#34;http://fizarbd.github.io/web/layout/variables/&#34;&gt;node
variables&lt;/a&gt; available to use in this template
along with Sitemap-specific ones:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.Sitemap.ChangeFreq&lt;/strong&gt; The page change frequency&lt;br&gt;
&lt;strong&gt;.Sitemap.Priority&lt;/strong&gt; The priority of the page&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In addition to the standard node variables, the homepage has access to all
site pages through &lt;code&gt;.Data.Pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If provided Hugo will use /layouts/sitemap.xml instead of the internal
one.&lt;/p&gt;

&lt;h2 id=&#34;hugo-s-sitemap-xml&#34;&gt;Hugo’s sitemap.xml&lt;/h2&gt;

&lt;p&gt;This template respects the version 0.9 of the &lt;a href=&#34;http://www.sitemaps.org/protocol.html&#34;&gt;Sitemap
Protocol&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;urlset xmlns=&amp;quot;http://www.sitemaps.org/schemas/sitemap/0.9&amp;quot;&amp;gt;
  {{ range .Data.Pages }}
  &amp;lt;url&amp;gt;
    &amp;lt;loc&amp;gt;{{ .Permalink }}&amp;lt;/loc&amp;gt;
    &amp;lt;lastmod&amp;gt;{{ safeHtml ( .Date.Format &amp;quot;2006-01-02T15:04:05-07:00&amp;quot; ) }}&amp;lt;/lastmod&amp;gt;{{ with .Sitemap.ChangeFreq }}
    &amp;lt;changefreq&amp;gt;{{ . }}&amp;lt;/changefreq&amp;gt;{{ end }}{{ if ge .Sitemap.Priority 0.0 }}
    &amp;lt;priority&amp;gt;{{ .Sitemap.Priority }}&amp;lt;/priority&amp;gt;{{ end }}
  &amp;lt;/url&amp;gt;
  {{ end }}
&amp;lt;/urlset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Important: Hugo will automatically add the following header line to this file
on render&amp;hellip;please don&amp;rsquo;t include this in the template as it&amp;rsquo;s not valid HTML.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>404.html Templates</title>
      <link>http://fizarbd.github.io/web/templates/404/</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://fizarbd.github.io/web/templates/404/</guid>
      <description>

&lt;p&gt;When using Hugo with &lt;a href=&#34;http://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; you can provide
your own 404 template by creating a 404.html file in the root.&lt;/p&gt;

&lt;p&gt;404 pages are of the type &amp;ldquo;node&amp;rdquo; and have all the &lt;a href=&#34;http://fizarbd.github.io/web/layout/variables/&#34;&gt;node
variables&lt;/a&gt; available to use in the templates.&lt;/p&gt;

&lt;p&gt;In addition to the standard node variables, the homepage has access to
all site content accessible from .Data.Pages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ layouts/
    404.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;404-html&#34;&gt;404.html&lt;/h2&gt;

&lt;p&gt;This is a basic example of a 404.html template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>